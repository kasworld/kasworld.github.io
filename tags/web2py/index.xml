<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web2py on 취미로 프로그래밍을 하는 사람입니다.</title>
    <link>https://kasworld.github.io/tags/web2py/</link>
    <description>Recent content in web2py on 취미로 프로그래밍을 하는 사람입니다.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Tue, 10 Dec 2013 11:57:00 +0900</lastBuildDate>
    <atom:link href="https://kasworld.github.io/tags/web2py/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>web2py access control(접근 제어) 정리.</title>
      <link>https://kasworld.github.io/posts/2013-12-10-web2pyaccesscontrol%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Tue, 10 Dec 2013 11:57:00 +0900</pubDate>
      <guid>https://kasworld.github.io/posts/2013-12-10-web2pyaccesscontrol%EC%A0%91%EA%B7%BC%EC%A0%9C%EC%96%B4%EC%A0%95%EB%A6%AC/</guid>
      <description>회사 세미나용으로 http://web2py.com/books/default/chapter/29/09/access-control 을 요약한 내용 입니다.
접근제어 access control web2py 는 Role Based Access Control 제공 (RBAC)역할을 기반으로하는 접근제어로 context-based access control (CBAC) 과는 다르다. ( message의 context에 따라 달라지지 않는다, 상태, 혹은 데이터 ) user - role - job function 형태web2py 에서는 Auth class를 통해서 구현된다. 아래와 같은 테이블이 필요한데 프로젝트를 만들때 자동으로 코드가 생성된다. auth_user : 유저이름 , email , 암호 , 상태 (등록 대기, 완료, 블럭됨 )auth_group : 유저의 그룹(롤) 정보 , 이게 role ( 사용자 역할 ) auth_membership : group - user link table , user - group의 다대 다 연결.</description>
    </item>
    <item>
      <title>web2py 소개 </title>
      <link>https://kasworld.github.io/posts/2013-04-13-web2py%EC%86%8C%EA%B0%9C/</link>
      <pubDate>Sat, 13 Apr 2013 20:31:00 +0900</pubDate>
      <guid>https://kasworld.github.io/posts/2013-04-13-web2py%EC%86%8C%EA%B0%9C/</guid>
      <description>회사에서 세미나 용으로 작성한 글인데 쓰고 보니 이것 만으로도 web2py의 소개 용으로는 충분 할 것 같아서 그리고 블로그에 올려도 좋을 듯한 내용이어서 올려 봅니다.
원문은 http://web2py.com/books/default/chapter/29/03 이며 번역을 한 것이 아니고 업무에 필요한/필요할 것 같은 것들을 정리한 글이라 원문과 같이 놓고 보셔야 이해가 될 듯 합니다. 제가 맡은 부분인 Overview 부분 만 입니다. ^^
web2py 개요 - overview
** **
시작하기 - startup web2py는 윈도우와 맥에선 실행 프로그램으로도 제공되기 때문에 따로 python 이 필요하지 않다.</description>
    </item>
    <item>
      <title>uwsgi 사용시 주의점</title>
      <link>https://kasworld.github.io/posts/2011-07-08-uwsgi%EC%82%AC%EC%9A%A9%EC%8B%9C%EC%A3%BC%EC%9D%98%EC%A0%90/</link>
      <pubDate>Fri, 08 Jul 2011 11:25:00 +0900</pubDate>
      <guid>https://kasworld.github.io/posts/2011-07-08-uwsgi%EC%82%AC%EC%9A%A9%EC%8B%9C%EC%A3%BC%EC%9D%98%EC%A0%90/</guid>
      <description>uwsgi 사용시 (http://projects.unbit.it/uwsgi/wiki)
post data를 처리 하고 싶으면 결과 return/yield 를 내보내기 전에 읽어 와야 한다.
그렇지 않으면 메롱한 에러를 내는 경우가 왕왕 생긴다. ( 검색해보니 알려진 버그인듯. )
이것때문에 오늘 시간좀 소비 했음.
아 그리고 web service 개발할때 curl 이 정말 편하다. command line으로 http post를 할수 있으니 코드 테스트가 정말 편하게 이루어지더라. ;;;
역시 인간은 검색을 생활화 해야 하는 것이었다 ;;;</description>
    </item>
    <item>
      <title>python으로 웹 서비스 만들어보기.</title>
      <link>https://kasworld.github.io/posts/2011-07-07-python%EC%9C%BC%EB%A1%9C%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0/</link>
      <pubDate>Thu, 07 Jul 2011 15:20:00 +0900</pubDate>
      <guid>https://kasworld.github.io/posts/2011-07-07-python%EC%9C%BC%EB%A1%9C%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0/</guid>
      <description>를 하기전에 ^^;;;
web server : apache , lighttpd, nginx , cherokee, cherrypy, simplehttpserver(python) web app protocol : static file, wsgi , uwsgi web app frame work : node, cherrypy, django , web2py, 중 어떤 조합을 사용할지를 결정해야 해서
그동안 써왔던 것을 모두 점검하는 의미로 간단/대충 벤치마크를 해봤음. 즉 이글은 그 기록을 남기기 위한 글. ^^
기본적으로 다 hello world 를 리턴하는 static file 또는 print 코드 를 사용 해서 테스트 했습니다.</description>
    </item>
  </channel>
</rss>
